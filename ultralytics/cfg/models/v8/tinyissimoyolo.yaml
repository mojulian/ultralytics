# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# YOLOv8 object detection model with P3-P5 outputs. For Usage examples see https://docs.ultralytics.com/tasks/detect

# Parameters
nc: 20  # number of classes


# YOLOv8.0n backbone
backbone:
  # [from, number, module, args]
  [[-1, 1, Conv, [16, 3, 1]],  # 0
   [-1, 1, nn.MaxPool2d, [2, 2, 0]],  # 3-P2/4
   [-1, 1, Conv, [16, 3, 1]],
   [-1, 1, Conv, [16, 3, 1]],  # 0
   [-1, 1, nn.MaxPool2d, [2, 2, 0]],  # 3-P2/4
   [-1, 1, Conv, [32, 3, 1]],
   [-1, 1, Conv, [32, 3, 1]],  # 0
   [-1, 1, nn.MaxPool2d, [2, 2, 0]],  # 3-P2/4
   [-1, 1, Conv, [64, 3, 1]],
   [-1, 1, Conv, [64, 3, 1]],  # 0
   [-1, 1, nn.MaxPool2d, [2, 2, 0]],  # 3-P2/4
   [-1, 1, Conv, [64, 3, 1]],
   [-1, 1, Conv, [128, 3, 1]],  # 0
   [-1, 1, nn.MaxPool2d, [2, 2, 0]],  # 3-P2/4
   [-1, 1, Conv, [128, 3, 1]],
  ]








# YOLOv8.0n head
head:
  # [[-1, 1, nn.MaxPool2d, [2, 2, 0]],  
  # # [-1, 1, nn.Flatten, []],
  # [[-1],1,  Detect, [nc]]
  # ]  
  # - [-1, 1, nn.Linear, [128, 24*64]]
  - [-1, 1, Conv, [24, 1, 1]]
  # - [-1, 1, Conv, [24, 1, 1]]
  # - [[-1, 4], 1, Concat, [1]]  # cat head P4

  - [[-1],1,  Detect, [nc]]

# # Ultralytics YOLO ðŸš€, AGPL-3.0 license
# # YOLOv8 object detection model with P3-P5 outputs. For Usage examples see https://docs.ultralytics.com/tasks/detect

# # Parameters
# nc: 20  # number of classes


# # YOLOv8.0n backbone
# backbone:
#   # [from, number, module, args]
#   [[-1, 1, nn.Conv2d, [3, 16, 3, 1, 1]],  # 0
#   #  [-1, 1, nn.BatchNorm2d, [16]],  # 1-P1/2
#    [-1, 1, nn.ReLU, []],
#    [-1, 1, nn.MaxPool2d, [2, 2, 0]],  # 3-P2/4
#    [-1, 1, nn.Conv2d, [16, 16, 3, 1, 1]],
#   #  [-1, 1, nn.BatchNorm2d, [16]],  # 1-P1/2
#    [-1, 1, nn.ReLU, []],
#    [-1, 1, nn.Conv2d, [16, 16, 3, 1, 1]],  # 0
#   #  [-1, 1, nn.BatchNorm2d, [16]],  # 1-P1/2
#    [-1, 1, nn.ReLU, []],
#    [-1, 1, nn.MaxPool2d, [2, 2, 0]],  # 3-P2/4
#    [-1, 1, nn.Conv2d, [16, 32, 3, 1, 1]],
#   #  [-1, 1, nn.BatchNorm2d, [32]],  # 1-P1/2
#    [-1, 1, nn.ReLU, []],
#    [-1, 1, nn.Conv2d, [32, 32, 3, 1, 1]],  # 0
#   #  [-1, 1, nn.BatchNorm2d, [32]],  # 1-P1/2
#    [-1, 1, nn.ReLU, []],
#    [-1, 1, nn.MaxPool2d, [2, 2, 0]],  # 3-P2/4
#    [-1, 1, nn.Conv2d, [32, 64, 3, 1, 1]],
#   #  [-1, 1, nn.BatchNorm2d, [64]],  # 1-P1/2
#    [-1, 1, nn.ReLU, []],
#    [-1, 1, nn.Conv2d, [64, 64, 3, 1, 1]],  # 0
#   #  [-1, 1, nn.BatchNorm2d, [64]],  # 1-P1/2
#    [-1, 1, nn.ReLU, []],
#    [-1, 1, nn.MaxPool2d, [2, 2, 0]],  # 3-P2/4\
#    [-1, 1, nn.Conv2d, [64, 64, 3, 1, 1]],
#   #  [-1, 1, nn.BatchNorm2d, [128]],  # 1-P1/2
#    [-1, 1, nn.ReLU, []],
#    [-1, 1, nn.Conv2d, [64, 128, 3, 1, 1]],  # 0
#   #  [-1, 1, nn.BatchNorm2d, [128]],  # 1-P1/2
#    [-1, 1, nn.ReLU, []],
#    [-1, 1, nn.MaxPool2d, [2, 2, 0]],  # 3-P2/4\
#    [-1, 1, nn.Conv2d, [128, 128, 3, 1, 1]],
#   #  [-1, 1, nn.BatchNorm2d, [128]],  # 1-P1/2
#    [-1, 1, nn.ReLU, []],
#   ]

# # YOLOv8.0n head
# head:
#   [[-1, 1, nn.MaxPool2d, [2, 2, 0]],  
#   [-1, 1, nn.Conv2d, [128, 3, 3, 1, 1]],
#   # [-1, 1, nn.Linear, [384, 128]],
#     [-1, 1, Conv, [128, 3, 1]], 
#   # [-1, 1, nn.Flatten, []],
#   [[-1], 1,  Detect, [nc]]
#   ]  
